          
pipeline TemperaturesPipeline {
 TemperaturesExtractor
    ->ZipInterpreter
    ->TemperaturesFilePicker 
    ->TemperaturesTextFileInterpreter
    ->TemperaturesCSVInterpreter 
    ->TemperaturesCellRangeSelector 
    ->TemperaturesColumnDeleter
    ->TemperaturesTableInterpreter
    ->TemperatureTransformer
    ->BatteryTemperatureTransformer
    ->TemperaturesLoader;
 
 
 block TemperaturesExtractor oftype HttpExtractor {
    url:"https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
 }

 block ZipInterpreter oftype ArchiveInterpreter {
    archiveType: "zip";
 }

 block TemperaturesFilePicker oftype FilePicker {
    path: "/data.csv";
 }

 block TemperaturesTextFileInterpreter oftype TextFileInterpreter {}
 
 block TemperaturesCSVInterpreter oftype CSVInterpreter { 
    delimiter: ";";
 }

block TemperaturesCellRangeSelector oftype CellRangeSelector {
        select: range A1:K*;
}

block TemperaturesColumnDeleter oftype ColumnDeleter {
	delete: 
      [column F, column G, column H, column I];    
}

block TemperaturesTableInterpreter oftype TableInterpreter { 
     header: true; 
     columns: [
                "id" oftype Id,
                "producer" oftype text,
                "model" oftype text,
                "month" oftype integer,
                "temperature" oftype decimal,
                "battery_temperature" oftype decimal
              ];
}

block TemperaturesLoader oftype SQLiteLoader { 
    table: "temperatures";
     file: "./temperatures.sqlite";
}

transform TemperatureConvert {
   from Celsius oftype decimal;
   to Fahrenheit oftype decimal;
   Fahrenheit: (Celsius * 9/5) + 32;
}
block TemperatureTransformer oftype TableTransformer {
   inputColumns: ['temperature'];
   outputColumn: 'temperature';
   use: TemperatureConvert;
}
block BatteryTemperatureTransformer oftype TableTransformer {
   inputColumns: ['battery_temperature'];
   outputColumn: 'battery_temperature';
   use: TemperatureConvert;
} 

valuetype Id oftype integer {
        constraints: [ IdConstraint ];
}

constraint IdConstraint on integer:
   value > 0;
 
}
  
